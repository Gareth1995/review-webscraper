CREATE EXTENSION IF NOT EXISTS "pgcrypto"; -- Enables UUID generation

CREATE TABLE hotels (
    hotel_id VARCHAR(20) PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);

CREATE TABLE reviews (
    review_id BIGSERIAL PRIMARY KEY,
    hotel_id VARCHAR(20) REFERENCES hotels(hotel_id) ON DELETE CASCADE,
    hotel_name VARCHAR(255),
    source_name VARCHAR(255),
    positive_review TEXT,
    negative_review TEXT,
    review_rating DECIMAL(3,2),
    reviewer_name VARCHAR(255),
    country VARCHAR(100),
    sentiment VARCHAR(50),
    reviewer_check_in_date DATE,
    review_created_date DATE,
    apartment_type VARCHAR(100),
    length_nights_stay INT,
    group_type VARCHAR(100),
    review_feedback TEXT,
    seen BOOLEAN,
    review_text TEXT);--,
    -- UNIQUE(hotel_id, source_id, reviewer_name, COALESCE(positive_review, ''), COALESCE(negative_review, ''))
--);

-- Now create a unique index with COALESCE()
CREATE UNIQUE INDEX unique_review ON reviews (
    hotel_id,
    reviewer_name, 
    COALESCE(positive_review, ''), 
    COALESCE(negative_review, ''), 
    COALESCE(reviewer_check_in_date, '2000-01-01'), -- Default date for NULL values
    COALESCE(review_created_date, '2000-01-01'),
    COALESCE(length_nights_stay, -1),  -- Default -1 for NULL values
    COALESCE(apartment_type, ''), 
    COALESCE(review_feedback, '')
);

CREATE TABLE users (
    user_id BIGSERIAL PRIMARY KEY,
    user_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,  -- Ensures unique emails
    hotel_id VARCHAR(20) REFERENCES hotels(hotel_id) ON DELETE CASCADE
);

-- Indexes for faster lookups
CREATE INDEX idx_reviews_hotel_id ON reviews(hotel_id);
CREATE INDEX idx_reviews_source_id ON reviews(source_id);
CREATE INDEX idx_reviews_sentiment ON reviews(sentiment);
CREATE INDEX idx_reviewer_country ON reviews(country);
CREATE INDEX idx_email ON users(email);


###################### For if you want to allow a user to be able to manage multiple hotels ###########################
CREATE TABLE user_hotels (
    user_id BIGSERIAL REFERENCES users(user_id) ON DELETE CASCADE,
    hotel_id UUID REFERENCES hotels(hotel_id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, hotel_id) -- Ensures unique user-hotel pairs
);
########################################################################################################################

###################### For if you want to add location data about hotels ###############################################
CREATE TABLE locations (
    location_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    hotel_id UUID REFERENCES hotels(hotel_id) ON DELETE CASCADE,
    address VARCHAR(255) NOT NULL,
    city VARCHAR(100),
    state VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    latitude DECIMAL(10, 8),
    longitude DECIMAL(11, 8)
);
#########################################################################################################################
INSERT INTO users (user_name, email, hotel_id)
VALUES ('Gaz Edwards', 'gazzy.ps4@gmail.com', 'MORBAY1');


INSERT INTO hotels (hotel_id, name)
VALUES 
    ('MORBAY1', 'Morro Bay Beach Inn');

INSERT INTO sources (source_name)
VALUES
	('booking.com');

-- For viewing the reviews table
SET client_encoding TO 'UTF8'; -- call first before select * from reviews

ALTER TABLE reviews 
ALTER COLUMN review_text DROP NOT NULL;

SELECT COUNT(*) FROM reviews;


SELECT hotel_id, AVG(review_rating) AS average_rating
FROM reviews
WHERE hotel_id = 'e1ada55f-000c-4991-9527-f72362cb6e80'
GROUP BY hotel_id;


SELECT sentiment, COUNT(sentiment) as count
FROM reviews
WHERE hotel_id = 'e1ada55f-000c-4991-9527-f72362cb6e80'
GROUP BY sentiment
ORDER BY count DESC
LIMIT 1
